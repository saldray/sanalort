Tanımlara hakim olalım

Git       : Free and open source version control system.
          What is the version control?
The management of changes to documents, computer programs,
large web sites ahd other collections of information

Directory : Folder  (Dizin : Klasör)
Terminal or Command Line   : Interface for Text Commands
(metin komutları için arayüz)

Terminal         : Uçbirim, Komut satırı, Konsol

CLI    : Command line interface (Komut satırı arayüzü)

cd     : Change Directory

Code Editor     : Word Processor for writing code

Repository      : Project or the folder/place where you project is kept (Depo)

Github          : A website to host your repositories online
                (ana makinemizdeki depolarımızı çevirim içi barındıran bir websitesi)

host            :ana makine, ev sahipliği yapmak, barındırmak

clone           : Bring a repository that is hosted somewhere like Github into a folder on your local machine

add             :Track your files and changes in Git

commit          :Save your files in git
(Dosyalarımızı git'e (içine) kaydetmeye yarıyor)
(işlemek, kaydı güncellemek, teslim etmek)
(commit ile (local repo) yerel repo'ya kayıt yapılmış olur.)

push      :Upload Git sommits to a remote repo, like Github
(push ile uzak depo'ya (remote repo(github)) kayıt yapılmış olur.)

Pull      :Download Changes from remote repo to your local machine(host)

Protocal  : Teşrifat
          :* Uyulması gereken kurallar kümesi.
          :** Bilgisayar bilimleri açısından protocoller (teşrifatlar)
          genelde iki veya daha fazla taraf için yapılması
          gereken bir duzu is belirtir.



user.name ve user.email (bakalım)

git config user.name    kullanıcı adımıza bakalım.
git config user.email   kullanıcı elektronik posta adresimize bakalım.

git config --list       Daha önce yapılmış bir atama varsa ekranda listelenir.
git config --global user.name 'kullanıcı_adı'   ad atanır
git config --global user.email 'eposta_adı'     e-posta atanır
git config --list

##########
Şimdi çalışma dizinimizde bir git oluşturalım.

git init      git ilk olarak başlatılıyor, yükleniyor.
git status    Durum bilgisi alınır.
git add .     bulunulan dizindeki değişiklikler geçiş bölgesine
              gönderilir. İndex bölgesine gönderildi.
git status    durum kontrol edilir.
git commit -m "bir ileti yazılır"       daha sonrada ne yaptınğımızı anımsamak için
-m            message
git status    Durum kontrolü


git add -A    git add .  Tüm değişiklikler staging area'ya gönderildi.

git push      En son remote repo'ya (github'a) gönderilir.


#############################
## github'dan clone yaptığımda git remote çalışır
$ git clone https:githup.com/username/....

git status      (durum hakkında bilgi alıyoruz)
git log         (verilen commitleri görürüz)
                (commit: to perform; to do : yapmak,(suç cinaye)
                işlemek)

# masaüstünde localde(yerelde) indirdiğim dizinin içerisindeki bir
# dosyada değişiklik yapayım. Değişiklik yapıldıktan sonra

git status           (m modified yani değiştirilmiş olduğunu görüyorum)
                     Bunları staging area'ya almam gerekiyor

git add .            (staging area'ya(geçiş bölgeisine, indeks bölgesine)
                     alındı)

git commit (-a) -m "localde içerikler değişti"          (git add ile staging area'ya
                     aldığım kayıtları, git commit ile local area'ya işledim)
                     (Şu anda yerel depomda kayıtlanmış oldu)

#git checkout        (branch (dal) değiştirmek için kullanılır daha sonradan
                     bakılabilir şimdilik ihtiyacım yok. İleride bakılacak)

git log              (yaptığım değişiklikler hakkında bilgi alırım, attığım
                     commit'ler burada görülür.)

git remote           (Originde olduğumu görürüm)
git remote -v        (Originin nereden kaynaklandığını ve hangi parametreleri
                     kullanacağımızı gösterir
                     push yapacağım zaman nereye gideceğimi gösteriyor.)

git push origin main

###########################
=== create a new repository on the command line ===
git init             (git başlatılır, git kurulur.)
git add README.md   (README.md okubeni dosyası eklenir. .md markdown uzantılı)
git commit -m "first commit"   adettendir ilk commit (kayıt) "first commit" diye atılır.
git branch -M main   (git "master" branch (dalında) ında çalışır.
                      github "main" branch (dalında) ında çalışır.
                      git varsayılanı "master"
                      github varsayılanı "main"
                      local repo'muzda git ile kayıtladığımız dosyaları ve
                      değişiklikleri daha sonradan github'a, remote repo'ya
                      gönderdiğimizde sorun yaşamamak için git'i "master"dan
                      "main" branch'ına geçiriyoruz.)





 Command line instructions

You can also upload existing files from your computer using the instructions below.
Git global setup

git config --global user.name "saldıray other"
git config --global user.email "othernother@yandex.com"

Create a new repository

git clone git@gitlab.com:deneme2291203/gitlab.git
cd gitlab
git switch --create main
touch README.md
git add README.md
git commit -m "add README"
git push --set-upstream origin main

Push an existing folder

cd existing_folder
git init --initial-branch=main
git remote add origin git@gitlab.com:deneme2291203/gitlab.git
git add .
git commit -m "Initial commit"
git push --set-upstream origin main

Push an existing Git repository

cd existing_repo
git remote rename origin old-origin
git remote add origin git@gitlab.com:deneme2291203/gitlab.git
git push --set-upstream origin --all
git push --set-upstream origin --tags
